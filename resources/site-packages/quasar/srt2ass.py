import sys
import os
import re
import codecs


def open_file(input_file):
    encodings = ["gb2312", "gbk", 'utf-16', "cp1252", "big5", "utf-8"]
    tmp = ""
    encoding = ""
    for enc in encodings:
        try:
            with codecs.open(input_file, mode="rb", encoding=enc) as fd:
                tmp = fd.read()
                encoding = enc
                break
        except UnicodeError:
            continue

    return [tmp, encoding]


def get_color(color):
    """
    Color values are expressed in hexadecimal BGR format as &HBBGGRR& or
    ABGR (with alpha channel) as &HAABBGGRR&. Transparency (alpha) can be
    expressed as &HAA&. Note that in the alpha channel, 00 is opaque and
    FF is transparent.
    """
    if color == "black":
        return "&H00000000"
    elif color == "white":
        return "&H00FFFFFF"
    elif color == "yellow":
        return "&H0300FFFF"
    elif color == "blue":
        return "&H00FF0000"
    else:
        return "&HFF000000"


def get_border_style(border_style):
    """
    BorderStyle: 1 - Outline with shadow, 3 - Rendered with an opaque box.
    """
    if border_style == "rectangle":
        return "3"
    else:
        return "1"


def get_boolean(boolean):
    if boolean:
        return "-1"
    else:
        return "0"


def get_alignment(vertical_align, horizontal_align):
    """
    Alignment values are based on the numeric keypad.
    1 - bottom left, 2 - bottom center, 3 - bottom right, 4 - center left,
    5 - center center, 6 - center right, 7 - top left, 8 - top center,
    9 - top right.
    In addition to determining the position of the subtitle, this also
    determines the alignment of the text itself.
    """

    alignment = "%s_%s" % (vertical_align, horizontal_align)

    if alignment == "bottom_left":
        return "1"
    elif alignment == "bottom_right":
        return "3"
    elif alignment == "center_left":
        return "4"
    elif alignment == "center_center":
        return "5"
    elif alignment == "center_right":
        return "6"
    elif alignment == "top_left":
        return "7"
    elif alignment == "top_center":
        return "8"
    elif alignment == "top_right":
        return "9"
    else:
        return "2"


def srt2ass(input_file, font_name="Arial", font_size="20", subtitle_color="white", secondary_color="blue",
            outline_color="black", shadow_color="black", border_style="border", outline_px="1", shadow_px="0",
            margin_l="10", margin_r="10", margin_v="10"):

    if not input_file.endswith(".srt"):
        print "Input file (%s) is not .srt" % input_file
        return None

    if not os.path.isfile(input_file):
        print "%s does not exist" % input_file
        return None

    params = {
        "font_name": font_name,
        "font_size": font_size,
        "subtitle_color": get_color(subtitle_color),
        "secondary_color": get_color(secondary_color),
        "outline_color": get_color(outline_color),
        "shadow_color": get_color(shadow_color),
        "bold": get_boolean(False),
        "italic": get_boolean(False),
        "underline": get_boolean(False),
        "strike_out": get_boolean(False),
        "scale_x": "100",
        "scale_y": "100",
        "spacing": "0",
        "angle": "0",
        "border_style": get_border_style(border_style),
        "outline": outline_px,
        "shadow": shadow_px,
        "alignment": get_alignment("bottom", "center"),
        "margin_l": margin_l,
        "margin_r": margin_r,
        "margin_v": margin_v,
        "encoding": "1"
    }

    output_file = "%s.ass" % input_file[:-4]
    head_str = """\
[Script Info]
; This is an Advanced Sub Station Alpha v4+ script.
Title:
ScriptType: v4.00+
Collisions: Normal
PlayDepth: 0

[V4+ Styles]
Format: Name,Fontname,Fontsize,PrimaryColour,SecondaryColour,OutlineColour,BackColour,Bold,Italic,Underline,StrikeOut,\
ScaleX,ScaleY,Spacing,Angle,BorderStyle,Outline,Shadow,Alignment,MarginL,MarginR,MarginV,Encoding
Style: SubStyle,%(font_name)s,%(font_size)s,%(subtitle_color)s,%(secondary_color)s,%(outline_color)s,%(shadow_color)s,\
%(bold)s,%(italic)s,%(underline)s,%(strike_out)s,%(scale_x)s,%(scale_y)s,%(spacing)s,%(angle)s,%(border_style)s,\
%(outline)s,%(shadow)s,%(alignment)s,%(margin_l)s,%(margin_r)s,%(margin_v)s,%(encoding)s

[Events]
Format: Layer, Start, End, Style, Actor, MarginL, MarginR, MarginV, Effect, Text""" % params

    tmp, enc = open_file(input_file)
    if tmp == "" or enc == "":
        return None

    lines = tmp.splitlines()
    sub_lines = ""
    tmp_lines = ""
    line_count = 0

    for line in lines:
        line = line.replace(u"\xef\xbb\xbf", "")
        if re.match("^\d+$", line):
            if tmp_lines:
                sub_lines += tmp_lines + "\n"
            tmp_lines = ""
            line_count = 0
            continue
        elif line:
            if re.match("-?\d\d:\d\d:\d\d", line):
                line = line.replace("-0", "0")
                tmp_lines += "Dialogue: 0,%s,SubStyle,,0,0,0,," % line
                line_count += 1
            elif line_count < 2:
                tmp_lines += line
                line_count += 1
            else:
                tmp_lines += "\N" + line
                line_count += 1

    sub_lines += tmp_lines + "\n"

    sub_lines = re.sub(r"-?\d(\d:\d{2}:\d{2}),(\d{2})\d", "\\1.\\2", sub_lines)
    sub_lines = re.sub(r"\s+-->\s+", ",", sub_lines)
    # replace style
    sub_lines = re.sub(r"<([ubi])>", "{\\\\\g<1>1}", sub_lines)
    sub_lines = re.sub(r"</([ubi])>", "{\\\\\g<1>0}", sub_lines)
    sub_lines = re.sub(r"<font\s+color=\"?#(\w{2})(\w{2})(\w{2})\"?>", "{\\\\c&H\\3\\2\\1&}", sub_lines)
    sub_lines = re.sub(r"</font>", "", sub_lines)

    output_str = head_str + "\n" + sub_lines
    output_str = output_str.encode(enc)

    with open(output_file, "wb") as output:
        output.write(output_str)

    return output_file


def main():
    if len(sys.argv) > 1:
        for name in sys.argv[1:]:
            output = srt2ass(name)
            if output is not None:
                print "Saved subtitle in %s" % output
            else:
                print "Failed to convert subtitle"


if __name__ == "__main__":
    main()
